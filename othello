#!/usr/local/bin/gosh

(use gauche.parseopt)
(use srfi-1)
(use srfi-43)
(use srfi-27)
(use file.util)

;;
;; -11 -10 -9
;;  -1  __  1
;;   9  10 11
;;
(define-constant all-directions (list -11 -10 -9 -1 1 9 10 11))

;;
;; pieces
;;
(define-constant empty 0)
(define-constant black 1)
(define-constant white 2)
(define-constant outer 3)

;;
;; pieceから表示用のcharを取得する
;;
(define (name-of piece)
  (ref ".@O?" piece))

;;
;; opponent(相手)の色を取得する
;;
(define (opponent player)
  (if (= player black)
      white
      black))

;;
;; boardの指定された場所の値を取得する
;;
(define (bref board square)
  (ref board square))

(define (copy-board board)
  (vector-copy board))

;;
;; brefのsetterを登録
;;
(set! (setter bref)
      (^(board square val)
        (set! (ref board square) val)))

;;
;; board上の有効なマスかどうか
;;
(define (square? index)
  (and (integer? index)
       (<= 11 index 88)
       (<= 1 (mod index 10) 8)))

;;
;; board内で有効なマスのindex
;;
(define-constant all-squares
  (fold-right (^(i acc)
                ;; 有効なマスであればaccに登録
                (if (square? i)
                    (cons i acc)
                    acc))
              '()
              (iota 100 1)))

;;
;; boardの初期状態をセットする
;;
(define (initial-board)
  ;; othelloのボード
  ;; オセロは8x8マスなので、有効なマス目は11から88とする
  ;; その他のマスは無効なマス
  (let1 board (list->vector (make-list 100 outer))
    ;; 有効なマスにemptyを配置
    (dolist (square all-squares)
      (set! (bref board square) empty))
    ;; 中央の4マスにwhiteとblackを配置
    (set! (bref board 44) white) (set! (bref board 45) black)
    (set! (bref board 54) black) (set! (bref board 55) white)
    board))

;;
;; board上にpieceがいくつ存在するか調べる
;;
(define (count-piece piece board)
  (vector-fold (^(i acc x)
                 (if (= x piece)
                     (+ acc 1)
                     acc))
               0
               board))

;;
;; boardをconsoleに表示する
;;
(define (print-board board)
  ;; 列とヘッダ情報を表示
  (print "   1 2 3 4 5 6 7 8 ")
  (dotimes (row 8)
    (let1 row (+ row 1)
      ;; 行ヘッダ
      (display (* 10 row))(display " ")
      (dotimes (col 8)
        (let* ((col (+ col 1))
               (piece (bref board (+ col (* 10 row)))))
          (display (name-of piece)))(display " ")))
    (print))
  ;; 現在のマスの集計を表示する
  (format #t "[~a=~2a ~a=~2a (~3@d)]"
          (name-of black)(count-piece black board)
          (name-of white)(count-piece white board)
          (count-difference black board))
  (print))

;;
;; 相手との差がいくつあるか計算する
;;
(define (count-difference player board)
  (- (count-piece player board)
     (count-piece (opponent player) board)))

;;
;; boardの有効なマス内かどうか
;;
(define (valid? move)
  (square? move))

;;
;; コマを置こくことが可能なマスであるかどうか
;;
(define (legal? move player board)
  (and (= (bref board move) empty)
       (any (pa$ would-flip? move player board)
            all-directions)))

;;
;; コマを置いて反転を行う
;;
(define (make-move move player board)
  ;; コマを置く
  (set! (bref board move) player)
  ;; コマを置いたことによる反転を行う
  (dolist (dir all-directions)
    (make-flips! move player board dir))
  board)

;;
;; moveからdirの方向へbracketerまでplayerで反転を行う
;;
(define (make-flips! move player board dir)
  ;; playerはmoveからdirに向けて反転可能か？
  ;; 可能であれば反転終端のマスが返る
  (if-let1 bracketer (would-flip? move player board dir)
           (let rec ((c (+ move dir)))
             ;; 反転終端でなければ
             (unless (= c bracketer)
               (set! (bref board c) player)
               (rec (+ c dir))))))

;;
;; playerはmoveからdirに向けて反転可能か？
;;
(define (would-flip? move player board dir)
  (let1 c (+ move dir)
    ;; cが敵playerかつ
    (and (= (bref board c)(opponent player))
         ;; 反転の終端を取得
         (find-bracketing-piece (+ c dir) player board dir))))

;;
;; 反転の終端を探索する
;;
(define (find-bracketing-piece square player board dir)
  (let rec ((square square))
    (let1 c (bref board square)
      (cond
       ;; 自分のマスであればそこまで
       ((= c player) square)
       ;; 敵のマスであれば探索を続ける
       ((= c (opponent player)) (rec (+ square dir)))
       ;; どちらでもなければ反転できない
       (else #f)))))

;;
;; gameのメインループ
;;
(define (othello bl-strategy wh-strategy
                 :optional (print? #t))
  ;; boardを初期化
  (let1 board (initial-board)
    (let rec ((player black)(strategy bl-strategy))
      ;; gameが続けば
      (when player
        (get-move! strategy player board print)
        ;; 次のターン
        (rec (next-to-play board player print?)
             (if (= player black)
                 wh-strategy
                 bl-strategy))))
    ;; game終了時
    (when print?
      (print "The game is over. Final result:")
      (print-board board))
    (count-difference black board)))

;;
;; 次のターンへ移行する
;;
(define (next-to-play board previous-player print?)
  (let1 opp (opponent previous-player)
    (cond
     ;; 相手のターンに移行
     ((any-legal-move? opp board) opp)
     ;; 相手に次の手がなければ再度同じplayerのターン
     ((any-legal-move? previous-player board)
      (when print?
        (print (name-of opp) " hasno moves and must pass.")
        previous-player))
     ;; どちらでもなければgame終了
     (else #f))))

;;
;; playerに次の手はあるか？
;;
(define (any-legal-move? player board)
  (any (^(move)
         (legal? move player board))
       all-squares))

;;
;;
;;
(define (get-move! strategy player board print?)
  (when print?
    (print)
    (print-board board))
  (let1 move (strategy player (copy-board board))
    (if (and (valid? move)
             (legal? move player board))
        (begin
          (when print?
            (print (name-of player)
                   " moves to "
                   move
                   "."))
          (make-move move player board))
        (begin
          (warn "Illegal move: ~d" move)
          (get-move! strategy player board print?)))))

;; ==========================================================

;;
;; strategy : human
;;
(define (human player board)
  ;; ignore board
  (print)
  (display (name-of player))
  (display " to move: ")
  (read))

;;
;; strategy : random
;;
(define (random-strategy player board)
  (define (random-elt choices)
    (list-ref choices (random-integer (length choices))))
  (random-elt (legal-moves player board)))

;;
;; 有効な手を取得する
;;
(define (legal-moves player board)
  (fold (^(move acc)
          (if (legal? move player board)
              (cons move acc)
              acc))
        '()
        all-squares))

;;
;; strategy : maximize-difference
;;
(define (maximize-difference player board)
  (define (maximizer eval-fn)
    (^ (player board)
       (let* ((moves (legal-moves player board))
              (scores (map (^(move)
                             (eval-fn player (make-move move player (copy-board board))))
                       moves))
              (best (apply max scores)))
         (ref moves (list-index (pa$ = best) scores) ))))
  ((maximizer count-difference) player board))


(define strategies
  `((human . ,human)
    (random . ,random-strategy )
    (max-diff . ,maximize-difference)))

(define (get-strategy str)
  (and str (assoc-ref strategies (string->symbol str))))

;; ==========================================================

(define (usage path)
  (let1 cmd (values-ref (decompose-path path) 1)
    (print "usage : " cmd " [options] [args]")
    (exit 0)))

(define (print-strategies)
  (print strategies)
  (exit 0))

(define (main args)
  (let-args (cdr args)
      ((help "h|help" => (pa$ usage (car args)))
       (list-strategy "l|list" => print-strategies)
       (first "f|first")
       (enemy "e|enemy=s")
       (self "s|self=s")
       (else (opt . _)
             (print "Unknown option : " opt)
             (usage (car args)))
       . rest)
    (let* ((enemy-strategy (or (get-strategy enemy) random-strategy))
           (player-strategy (or (get-strategy self) human))
           (bl-player (if first player-strategy enemy-strategy))
           (wh-player (if first enemy-strategy player-strategy)))
      (othello bl-player wh-player))))
